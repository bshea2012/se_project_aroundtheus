!function(){"use strict";const e=document.querySelector(".profile__add-button"),t=document.querySelector(".profile__edit-button"),s=(document.querySelector(".card__delete-button"),document.querySelector(".profile__avatar-edit-button")),i={profileName:".profile__title",profileDescription:".profile__description",profileAvatar:".profile__avatar"},r=".cards__list",n="#card-template",o="#preview-image-modal",a="#add-card-modal",l="#profile-edit-modal",u="#confirm-delete-modal",d="#avatar-edit-modal";class h{constructor(e,t,s,i,r){this._name=e.name,this._link=e.link,this._id=e._id,this._isLiked=e.isLiked,this._cardSelector=t,this._handleImageClick=s,this._handleCardDeleteClick=i,this._handleCardLike=r}_setEventListeners(){this._likeButton=this._cardElement.querySelector(".card__like-button"),this._likeButton.addEventListener("click",(()=>this._handleCardLike(this))),this._cardDelete=this._cardElement.querySelector(".card__delete-button"),this._cardDelete.addEventListener("click",(()=>this._handleCardDeleteClick(this))),this._cardImage.addEventListener("click",(()=>{this._handleImageClick({link:this._link,name:this._name})}))}getCard(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._cardImage=this._cardElement.querySelector(".card__image"),this._cardImage.src=this._link,this._cardElement.querySelector(".card__description-content").textContent=this._name,this._cardImage.alt=this._name,this._setEventListeners(),this._updateLikeButton(),this._cardElement}removeCard(){this._cardElement.remove(),this._cardElement=null}isCardLiked(e){this._isLiked=e,this._updateLikeButton()}_updateLikeButton(){this._isLiked?this._likeButton.classList.add("card__like-button_active"):this._likeButton.classList.remove("card__like-button_active")}handleCardLike(){this._likeButton.classList.toggle("card__like-button_active")}}class _{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t}resetValidation(){this.toggleButtonState(),this._inputElements.forEach((e=>{this._hideInputError(e)}))}toggleButtonState(){this._hasInvalidInput(this._inputElements)?this.disableButton():this._enableButton()}_enableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_hasInvalidInput(){return!this._inputElements.every((e=>e.validity.valid))}_checkInputValidity(e){if(!e.validity.valid)return this._showInputError(e);this._hideInputError(e)}_showInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_setEventListeners(){this._inputElements=[...this._formElement.querySelectorAll(this._inputSelector)],this._submitButton=this._formElement.querySelector(this._submitButtonSelector),this._inputElements.forEach((e=>{e.addEventListener("input",(t=>{this._checkInputValidity(e),this.toggleButtonState()}))}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class c{constructor(e,t){let{items:s,renderer:i}=e;this._items=s,this._renderer=i,this._element=document.querySelector(t)}renderItems(){this._items.forEach(this._renderer)}addItem(e){this._element.prepend(e)}}class m{constructor(e){this._popupElement=document.querySelector(e)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose),this._popupElement.addEventListener("click",this._handleRemoteClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose),this._popupElement.removeEventListener("click",this._handleRemoteClose)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};_handleRemoteClose=e=>{e.target===e.currentTarget&&this.close()};setEventListeners(){this._closeButton=this._popupElement.querySelector(".modal__close"),this._closeButton.addEventListener("click",(()=>this.close()))}}class p extends m{constructor(e,t){super(e),this._popupForm=this._popupElement.querySelector(".modal__form"),this._submitButton=this._popupElement.querySelector(".modal__button"),this._submitButtonText=this._submitButton.textContent,this._handleFormSubmit=t,this._inputList=this._popupForm.querySelectorAll(".modal__input")}_getInputValues(){const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e}setInputValues(e){this._inputList.forEach((t=>{t.value=e[t.name]}))}setEventListeners(){this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())})),super.setEventListeners()}setButtonText(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitButton.textContent=e?t:this._submitButtonText}}class E{constructor(e){let{profileName:t,profileDescription:s,profileAvatar:i}=e;this._nameElement=document.querySelector(t),this._jobElement=document.querySelector(s),this._avatarElement=document.querySelector(i)}getUserInfo(){return{name:this._nameElement.textContent,job:this._jobElement.textContent,src:this._avatarElement.src}}setUserInfo(e,t){this._nameElement.textContent=e,this._jobElement.textContent=t}setUserAvatar(e){this._avatarElement.src=e}}const v=new class extends m{constructor(e){super(e),this._popupImage=this._popupElement.querySelector(".card__image-preview"),this._popupCaption=this._popupElement.querySelector(".modal__heading-preview")}open(e){this._popupImage.src=e.link,this._popupImage.alt=e.name,this._popupCaption.textContent=e.name,super.open()}}(o),f=new p(a,(function(e){I((function(){return k.addNewCard(e.title,e.link).then((e=>{S.addItem(x(e))}))}),f)})),b=new p(l,(function(e){I((function(){return k.editUserInfo(e.title,e.description).then((()=>{g.setUserInfo(e.title,e.description)}))}),b)})),L=new p(d,(function(e){I((function(){return k.updateAvatar(e.link).then((()=>{g.setUserAvatar(e.link)}))}),L)})),C=new class extends m{constructor(e){super(e),this._closeConfirmForm=this._popupElement.querySelector(".modal__form"),this._submitButton=this._popupElement.querySelector(".modal__button-delete"),this._submitButtonText=this._submitButton.textContent}setConfirmDelete(e){this._handleFormSubmit=e}setDeleteText(e){this._submitButton.textContent=e?"Deleting...":this._submitButtonText}setEventListeners(){super.setEventListeners(),this._closeConfirmForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit()}))}}(u),k=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}_request(e,t){return fetch(e,t).then(this._checkResponse)}getInitialCards(){return this._request(`${this._baseUrl}/cards`,{headers:this._headers})}getUserInfo(){return this._request(`${this._baseUrl}/users/me`,{method:"GET",headers:this._headers})}editUserInfo(e,t){return this._request(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})})}addNewCard(e,t){return this._request(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:t})})}deleteCard(e){return this._request(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers})}updateAvatar(e){return this._request(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})})}updateLike(e,t){return this._request(`${this._baseUrl}/cards/${e}/likes`,{method:t?"DELETE":"PUT",headers:this._headers})}initialPageLoad(){return Promise.all([this.getUserInfo(),this.getInitialCards()])}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"2f5abbfd-693d-4973-87a8-2e8fc711af51","Content-Type":"application/json"}});let S,g,y;function B(e,t){v.open(e,t)}function I(e,t){let s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"Saving...";t.setButtonText(!0,s),e().then((()=>{t.close()})).catch(console.error).finally((()=>{t.setButtonText(!1)}))}function q(e){C.open(),C.setConfirmDelete((()=>{k.deleteCard(e._id).then((()=>{C.setDeleteText(!0),e.removeCard(),C.close()})).catch(console.error).finally((()=>{C.setDeleteText(!1)}))}))}function x(e){return new h(e,n,B,q,U).getCard()}function U(e){k.updateLike(e._id,e.isLiked).then((t=>{console.log(t.isLiked),e.isCardLiked(t.isLiked)})).catch(console.error)}v.setEventListeners(),f.setEventListeners(),b.setEventListeners(),L.setEventListeners(),C.setEventListeners(),k.initialPageLoad().then((e=>{let[t,s]=e;S=new c({items:s,renderer:e=>{S.addItem(x(e))}},r),S.renderItems(),g=new E(i),g.setUserInfo(t.name,t.about),g.setUserAvatar(t.avatar)})).catch((e=>{console.error("There is an Error: ",e)})),e.addEventListener("click",(()=>{T["place-form"].toggleButtonState(),f.open()})),t.addEventListener("click",(()=>{y=g.getUserInfo(),b.setInputValues({title:y.name,description:y.job}),T["profile-form"].resetValidation(),b.open()})),s.addEventListener("click",(()=>{y=g.getUserInfo(),L.setInputValues({link:y.src}),T["avatar-form"].toggleButtonState(),L.open()}));const T={};var w;w={inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},Array.from(document.querySelectorAll(".modal__form")).forEach((e=>{const t=new _(w,e),s=e.getAttribute("name");T[s]=t,t.enableValidation()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,