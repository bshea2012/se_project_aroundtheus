!function(){"use strict";const e=document.querySelector(".profile__add-button"),t=document.querySelector(".profile__edit-button"),s=(document.querySelector(".card__delete-button"),document.querySelector(".profile__avatar-edit-button")),r={profileName:".profile__title",profileDescription:".profile__description",profileAvatar:".profile__avatar"},i=".cards__list",n="#card-template",o="#preview-image-modal",a="#add-card-modal",l="#profile-edit-modal",d="#confirm-delete-modal",h="#avatar-edit-modal";class c{constructor(e,t,s,r,i){this._name=e.name,this._link=e.link,this._id=e._id,this._isLiked=e.isLiked,this._cardSelector=t,this._handleImageClick=s,this._handleCardDeleteClick=r,this._handleCardLike=i}_setEventListeners(){this._likeButton=this._cardElement.querySelector(".card__like-button"),this._likeButton.addEventListener("click",(()=>this._handleCardLike(this))),this._cardDelete=this._cardElement.querySelector(".card__delete-button"),this._cardDelete.addEventListener("click",(()=>this._handleCardDeleteClick(this))),this._cardImage.addEventListener("click",(()=>{this._handleImageClick({link:this._link,name:this._name})}))}getCard(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._cardImage=this._cardElement.querySelector(".card__image"),this._cardImage.src=this._link,this._cardElement.querySelector(".card__description-content").textContent=this._name,this._cardImage.alt=this._name,this._setEventListeners(),this._updateLikeButton(),this._cardElement}removeCard(){this._cardElement.remove(),this._cardElement=null}isCardLiked(e){this._isLiked=e,this._updateLikeButton()}_updateLikeButton(){this._isLiked?this._likeButton.classList.add("card__like-button_active"):this._likeButton.classList.remove("card__like-button_active")}handleCardLike(){this._likeButton.classList.toggle("card__like-button_active")}}class u{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t}resetValidation(){this.toggleButtonState(),this._inputElements.forEach((e=>{this._hideInputError(e)}))}toggleButtonState(){this._hasInvalidInput(this._inputElements)?this.disableButton():this._enableButton()}_enableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_hasInvalidInput(){return!this._inputElements.every((e=>e.validity.valid))}_checkInputValidity(e){if(!e.validity.valid)return this._showInputError(e);this._hideInputError(e)}_showInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_setEventListeners(){this._inputElements=[...this._formElement.querySelectorAll(this._inputSelector)],this._submitButton=this._formElement.querySelector(this._submitButtonSelector),this._inputElements.forEach((e=>{e.addEventListener("input",(t=>{this._checkInputValidity(e),this.toggleButtonState()}))}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class _{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._element=document.querySelector(t)}renderItems(){this._items.forEach(this._renderer)}addItem(e){this._element.prepend(e)}}class m{constructor(e){this._popupElement=document.querySelector(e)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose),this._popupElement.addEventListener("click",this._handleRemoteClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose),this._popupElement.removeEventListener("click",this._handleRemoteClose)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};_handleRemoteClose=e=>{e.target===e.currentTarget&&this.close()};setEventListeners(){this._closeButton=this._popupElement.querySelector(".modal__close"),this._closeButton.addEventListener("click",(()=>this.close()))}}class p extends m{constructor(e,t){super(e),this._popupForm=this._popupElement.querySelector(".modal__form"),this._submitButton=this._popupElement.querySelector(".modal__button"),this._submitButtonText=this._submitButton.textContent,this._handleFormSubmit=t,this._inputList=this._popupForm.querySelectorAll(".modal__input")}_getInputValues(){const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e}setInputValues(e){this._inputList.forEach((t=>{t.value=e[t.name]}))}setEventListeners(){this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues()),this._popupForm.reset()})),super.setEventListeners()}setButtonText(e){this._submitButtonText=e?"Saving":this._submitButton}}class E{constructor(e){let{profileName:t,profileDescription:s,profileAvatar:r}=e;this._nameElement=document.querySelector(t),this._jobElement=document.querySelector(s),this._avatarElement=document.querySelector(r)}getUserInfo(){return{name:this._nameElement.textContent,job:this._jobElement.textContent,src:this._avatarElement.src}}setUserInfo(e,t){this._nameElement.textContent=e,this._jobElement.textContent=t}setUserAvatar(e){this._avatarElement.src=e}}const v=new class extends m{constructor(e){super(e),this._popupImage=this._popupElement.querySelector(".card__image-preview"),this._popupCaption=this._popupElement.querySelector(".modal__heading-preview")}open(e){this._popupImage.src=e.link,this._popupImage.alt=e.name,this._popupCaption.textContent=e.name,super.open()}}(o),f=new p(a,(function(e){f.setButtonText(!0),C.addNewCard(e.title,e.link).then((()=>{S.addItem(q({name:e.title,link:e.link}))})).catch((e=>{console.error("There is an Error: ",e)})).finally((()=>{f.setButtonText(!1)})),f.close()})),k=new p(l,(function(e){k.setButtonText(!0),C.editUserInfo(e.title,e.description).then((()=>{y.setUserInfo(e.title,e.description)})).catch((e=>{console.error("There is an Error: ",e)})).finally((()=>{k.setButtonText(!1)})),k.close()})),b=new p(h,(function(e){b.setButtonText(!0),C.updateAvatar(e.link).then((()=>{y.setUserAvatar(e.link)})).catch((e=>{console.error("Avatar not updated: ",e)})).finally((()=>{b.setButtonText(!1)})),b.close()})),L=new class extends m{constructor(e){super(e),this._closeConfirmForm=this._popupElement.querySelector(".modal__form")}setConfirmDelete(e){this._handleFormSubmit=e}setEventListeners(){super.setEventListeners(),this._closeConfirmForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit()}))}}(d),C=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then(this._checkResponse)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{method:"GET",headers:this._headers}).then(this._checkResponse)}editUserInfo(e,t){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})}).then(this._checkResponse)}addNewCard(e,t){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:t})}).then(this._checkResponse)}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}updateAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._checkResponse)}updateLike(e,t){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:t?"DELETE":"PUT",headers:this._headers}).then(this._checkResponse)}initialPageLoad(){return Promise.all([this.getUserInfo(),this.getInitialCards()])}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"2f5abbfd-693d-4973-87a8-2e8fc711af51","Content-Type":"application/json"}});let S,y,g;function B(e,t){v.open(e,t)}function I(e){L.open(),L.setButtonText(!0),L.setConfirmDelete((()=>{C.deleteCard(e._id).then((()=>{e.removeCard(),L.close()})).catch((e=>{console.error("There is an Error: ",e)})).finally((()=>{L.setButtonText(!1)}))}))}function q(e){return new c(e,n,B,I,T).getCard()}function T(e){C.updateLike(e._id,e._isLiked).then((t=>{console.log(t.isLiked),e.isCardLiked(t.isLiked)})).catch((e=>{console.error("Card not liked: ",e)}))}v.setEventListeners(),f.setEventListeners(),k.setEventListeners(),b.setEventListeners(),L.setEventListeners(),C.initialPageLoad().then((e=>{let[t,s]=e;S=new _({items:s,renderer:e=>{S.addItem(q(e))}},i),S.renderItems(),y=new E(r),y.setUserInfo(t.name,t.about),y.setUserAvatar(t.avatar)})).catch((e=>{console.error("There is an Error: ",e)})),e.addEventListener("click",(()=>{U["place-form"].toggleButtonState(),f.open()})),t.addEventListener("click",(()=>{g=y.getUserInfo(),k.setInputValues({title:g.name,description:g.job}),U["profile-form"].resetValidation(),k.open()})),s.addEventListener("click",(()=>{g=y.getUserInfo(),b.setInputValues({link:g.src}),U["avatar-form"].toggleButtonState(),b.open()}));const U={};var x;x={inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},Array.from(document.querySelectorAll(".modal__form")).forEach((e=>{const t=new u(x,e),s=e.getAttribute("name");U[s]=t,t.enableValidation()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,