!function(){"use strict";const e=document.querySelector(".profile__add-button"),t=document.querySelector(".profile__edit-button"),s=(document.querySelector(".card__delete-button"),document.querySelector(".profile__avatar-edit-button")),i={profileName:".profile__title",profileDescription:".profile__description",profileAvatar:".profile__avatar"},n=".cards__list",r="#card-template",o="#preview-image-modal",a="#add-card-modal",l="#profile-edit-modal",h="#confirm-delete-modal",u="#avatar-edit-modal";class c{constructor(e,t,s,i,n){this._name=e.name,this._link=e.link,this._id=e._id,this._isLiked=e.isLiked,this._cardSelector=t,this._handleImageClick=s,this._handleCardDeleteClick=i,this._handleCardLike=n}_setEventListeners(){this._likeButton=this._cardElement.querySelector(".card__like-button"),this._likeButton.addEventListener("click",(()=>this._handleCardLike(this))),this._cardDelete=this._cardElement.querySelector(".card__delete-button"),this._cardDelete.addEventListener("click",(()=>this._handleCardDeleteClick(this))),this._cardImage.addEventListener("click",(()=>{this._handleImageClick({link:this._link,name:this._name})}))}getCard(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._cardImage=this._cardElement.querySelector(".card__image"),this._cardImage.src=this._link,this._cardElement.querySelector(".card__description-content").textContent=this._name,this._cardImage.alt=this._name,this._setEventListeners(),this._updateLikeButton(),this._cardElement}removeCard(){this._cardElement.remove(),this._cardElement=null}isCardLiked(e){this._isLiked=e,this._updateLikeButton()}_updateLikeButton(){this._isLiked?this._likeButton.classList.add("card__like-button_active"):this._likeButton.classList.remove("card__like-button_active")}handleCardLike(){this._likeButton.classList.toggle("card__like-button_active")}}class d{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t}resetValidation(){this.toggleButtonState(),this._inputElements.forEach((e=>{this._hideInputError(e)}))}toggleButtonState(){this._hasInvalidInput(this._inputElements)?this.disableButton():this._enableButton()}_enableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_hasInvalidInput(){return!this._inputElements.every((e=>e.validity.valid))}_checkInputValidity(e){if(!e.validity.valid)return this._showInputError(e);this._hideInputError(e)}_showInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_setEventListeners(){this._inputElements=[...this._formElement.querySelectorAll(this._inputSelector)],this._submitButton=this._formElement.querySelector(this._submitButtonSelector),this._inputElements.forEach((e=>{e.addEventListener("input",(t=>{this._checkInputValidity(e),this.toggleButtonState()}))}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class _{constructor(e,t){let{items:s,renderer:i}=e;this._items=s,this._renderer=i,this._element=document.querySelector(t)}renderItems(){this._items.forEach(this._renderer)}addItem(e){this._element.prepend(e)}}class m{constructor(e){this._popupElement=document.querySelector(e)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose),this._popupElement.addEventListener("click",this._handleRemoteClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose),this._popupElement.removeEventListener("click",this._handleRemoteClose)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};_handleRemoteClose=e=>{e.target===e.currentTarget&&this.close()};setEventListeners(){this._closeButton=this._popupElement.querySelector(".modal__close"),this._closeButton.addEventListener("click",(()=>this.close()))}}class p extends m{constructor(e,t){super(e),this._popupForm=this._popupElement.querySelector(".modal__form"),this._submitButton=this._popupElement.querySelector(".modal__button"),this._submitButtonText=this._submitButton.textContent,this._handleFormSubmit=t,this._inputList=this._popupForm.querySelectorAll(".modal__input")}_getInputValues(){const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e}setInputValues(e){this._inputList.forEach((t=>{t.value=e[t.name]}))}setEventListeners(){this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues()),this._popupForm.reset()})),super.setEventListeners()}setButtonText(e){e?(this._submitButtonText="Saving...",console.log(this._submitButtonText)):(this._submitButtonText=this._submitButton.textContent,console.log(this._submitButtonText))}}class E{constructor(e){let{profileName:t,profileDescription:s,profileAvatar:i}=e;this._nameElement=document.querySelector(t),this._jobElement=document.querySelector(s),this._avatarElement=document.querySelector(i)}getUserInfo(){return{name:this._nameElement.textContent,job:this._jobElement.textContent,src:this._avatarElement.src}}setUserInfo(e,t){this._nameElement.textContent=e,this._jobElement.textContent=t}setUserAvatar(e){this._avatarElement.src=e}}const v=new class extends m{constructor(e){super(e),this._popupImage=this._popupElement.querySelector(".card__image-preview"),this._popupCaption=this._popupElement.querySelector(".modal__heading-preview")}open(e){this._popupImage.src=e.link,this._popupImage.alt=e.name,this._popupCaption.textContent=e.name,super.open()}}(o),b=new p(a,(function(e){b.setButtonText(!0),L.addNewCard(e.title,e.link).then((e=>{B.addItem(x(e))})).catch((e=>{console.error("There is an Error: ",e)})).finally((()=>{b.setButtonText(!1)})),b.close()})),f=new p(l,(function(e){f.setButtonText(!0),L.editUserInfo(e.title,e.description).then((()=>{g.setUserInfo(e.title,e.description)})).catch((e=>{console.error("There is an Error: ",e)})).finally((()=>{f.setButtonText(!1)})),f.close()})),k=new p(u,(function(e){k.setButtonText(!0),L.updateAvatar(e.link).then((()=>{g.setUserAvatar(e.link)})).catch((e=>{console.error("Avatar not updated: ",e)})).finally((()=>{k.setButtonText(!1)})),k.close()})),C=new class extends m{constructor(e){super(e),this._closeConfirmForm=this._popupElement.querySelector(".modal__form"),this._submitButton=this._popupElement.querySelector(".modal__button-delete"),this._submitButtonText=this._submitButton.textContent}setConfirmDelete(e){this._handleFormSubmit=e}setDeleteText(e){e?(this._submitButtonText="Deleting...",console.log(this._submitButtonText)):(this._submitButtonText=this._submitButton.textContent,console.log(this._submitButtonText))}setEventListeners(){super.setEventListeners(),this._closeConfirmForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit()}))}}(h),L=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then(this._checkResponse)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{method:"GET",headers:this._headers}).then(this._checkResponse)}editUserInfo(e,t){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})}).then(this._checkResponse)}addNewCard(e,t){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:t})}).then(this._checkResponse)}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}updateAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._checkResponse)}updateLike(e,t){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:t?"DELETE":"PUT",headers:this._headers}).then(this._checkResponse)}initialPageLoad(){return Promise.all([this.getUserInfo(),this.getInitialCards()])}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"2f5abbfd-693d-4973-87a8-2e8fc711af51","Content-Type":"application/json"}});let B,g,S;function y(e,t){v.open(e,t)}function I(e){C.open(),C.setDeleteText(!0),C.setConfirmDelete((()=>{L.deleteCard(e._id).then((()=>{e.removeCard(),C.close()})).catch((e=>{console.error("There is an Error: ",e)})).finally((()=>{C.setDeleteText(!1)}))}))}function x(e){return new c(e,r,y,I,T).getCard()}function T(e){L.updateLike(e._id,e._isLiked).then((t=>{console.log(t.isLiked),e.isCardLiked(t.isLiked)})).catch((e=>{console.error("Card not liked: ",e)}))}v.setEventListeners(),b.setEventListeners(),f.setEventListeners(),k.setEventListeners(),C.setEventListeners(),L.initialPageLoad().then((e=>{let[t,s]=e;B=new _({items:s,renderer:e=>{B.addItem(x(e))}},n),B.renderItems(),g=new E(i),g.setUserInfo(t.name,t.about),g.setUserAvatar(t.avatar)})).catch((e=>{console.error("There is an Error: ",e)})),e.addEventListener("click",(()=>{q["place-form"].toggleButtonState(),b.open()})),t.addEventListener("click",(()=>{S=g.getUserInfo(),f.setInputValues({title:S.name,description:S.job}),q["profile-form"].resetValidation(),f.open()})),s.addEventListener("click",(()=>{S=g.getUserInfo(),k.setInputValues({link:S.src}),q["avatar-form"].toggleButtonState(),k.open()}));const q={};var U;U={inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},Array.from(document.querySelectorAll(".modal__form")).forEach((e=>{const t=new d(U,e),s=e.getAttribute("name");q[s]=t,t.enableValidation()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,